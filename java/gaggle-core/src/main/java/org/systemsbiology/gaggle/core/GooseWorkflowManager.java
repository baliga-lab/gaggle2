package org.systemsbiology.gaggle.core;

import org.systemsbiology.gaggle.core.datatypes.*;

import java.rmi.RemoteException;
import java.util.*;

/**
 *
 * <p>The GooseWorkflowManager class is a helper class for Gaggle Geese to carry out workflow related actions.
 * It wraps the most common actions so that Goose does not have to implement them individually.</p>
 *
 * <p>Here is how it works. When a goose receives a {@link WorkflowAction} from Boss, it should call
 * {@link #addSession(org.systemsbiology.gaggle.core.datatypes.WorkflowAction)}, which stores
 * the request in the processing queue. addSession generates an ID for each workflowAction received. The ID should
 * be passed to {@link #getWorkflowAction(String)} to retrieve the workflowAction stored in the processing queue.</p>
 *
 * <p>Some goose (such as Firegoose) employes a polling mechanism and thus needs to call {@link #getCurrentRequest()}
 * to retrieve a workflowAction.</p>
 *
 * <p>User can interact with the goose and generate data to be sent to the next component in the workflow.
 * Once the data is generated, the goose should call {@link #addSessionTargetData(String, int, org.systemsbiology.gaggle.core.datatypes.GaggleData)}
 * to add the data for the component. Note there could be multiple components in
 * the next step. Therefore, the goose needs to call addSessionTargetData multiple times until each component is
 * associated with data. Finally, the goose should call {@link #CompleteWorkflowAction(Boss, String)}
 * to complete the processing of the
 * workflowAction. CompleteWorkflowAction passes the data to to the Boss, which triggers the subsequent geese
 * of the workflow to process the data.</p>
 */

public class GooseWorkflowManager
{
    //HashMap<String, WorkflowStagingData> workflowStagingDataMap = new HashMap<String, WorkflowStagingData>();
    Map<String, WorkflowGaggleData> processingQueue = Collections.synchronizedMap(new HashMap<String, WorkflowGaggleData>());

    public GooseWorkflowManager()
    {

    }

    public String getSpecies(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            return this.processingQueue.get(requestID).getSpecies();
        }
        return null;
    }

    public String[] getNameList(String requestID)
    {                                                                                                  if (this.processingQueue.containsKey(requestID))
            return this.processingQueue.get(requestID).getNameList();
        return null;
    }

    public String getSize(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
            return this.processingQueue.get(requestID).getSize();
        return null;
    }

    public String getType(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            System.out.println("Workflow data type: " + this.processingQueue.get(requestID).getType());
            return this.processingQueue.get(requestID).getType();
        }
        return null;
    }

    public String getSubAction(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
            return this.processingQueue.get(requestID).getSubAction();
        return null;
    }

    /**
     * <p>When a Goose receives a workflowAction from the Boss,
     * it should call this function to save the workflowAction in the processing queue.</p>
     * @param request workflowAction received from the Boss
     * @return the requestID generated by the function
     */
    public String addSession(WorkflowAction request)
    {
        if (request != null)
        {
            System.out.println("Storing workflow request to the processing queue");
            UUID requestID = UUID.randomUUID();
            WorkflowGaggleData wfgd = new WorkflowGaggleData(requestID.toString(), request);
            this.processingQueue.put(requestID.toString(), wfgd);
            return requestID.toString();
        }
        return null;
    }

    /**
     * <p>Get the workflowAction given the requestID</p>
     * @param requestID the ID genmerated by addSession.
     * @return the workflowAction corresponding to the requestID
     */
    public WorkflowAction getWorkflowAction(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
            return this.processingQueue.get(requestID).getWorkflowAction();
        return null;
    }

    /**
     * Retrieve a workflowAction that has not been processed yet.
     * @return the requestID of the workflowAction
     */
    public String getCurrentRequest()
    {
        for (String key : this.processingQueue.keySet())
        {
            WorkflowGaggleData workflowGaggleData = this.processingQueue.get(key);
            if (!workflowGaggleData.isFetched())
            {
                workflowGaggleData.setFetched(true);
                return workflowGaggleData.getRequestID();
            }
        }
        return null;

        /*if (!this.processingQueue.isEmpty())
      {
          System.out.println("Getting " + this.processingQueue.size() + " workflow requests...");
          System.out.println((String)((this.processingQueue.keySet().toArray())[0]));

          return (String)((this.processingQueue.keySet().toArray())[0]);
      }
      return null; */
    }

    /**
     * <p>Remove a workflowAction from the processing queue.</p>
     * @param requestID the ID generated by addSession
     */
    public void removeRequest(String requestID)
    {
        if (requestID != null)
        {
            System.out.println("Removing workflow request " + requestID);
            this.processingQueue.remove(requestID);
        }
    }

    /**
     * <p>Attach data to a goose in the next step of a workflow.</p>
     * @param requestID requestID generated by addSession
     * @param targetIndex the index of the target goose in the workflowAction
     * @param data data to be associated with the target Goose
     */
    public void addSessionTargetData(String requestID, int targetIndex, GaggleData data)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            System.out.println("Adding data for " + requestID);
            WorkflowGaggleData stagingData = this.processingQueue.get(requestID);
            if (stagingData != null)
            {
                stagingData.addSessionData(targetIndex, data);
            }
        }
    }

    public boolean finalizeSessionAction(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            WorkflowGaggleData stagingData = this.processingQueue.get(requestID);
            System.out.println("Finalizing response for " + requestID);
            return stagingData.finalizeWorkflowAction();
        }
        else
            System.out.println("No data exists for " + requestID + ". Finalize session failed!!");
        return false;
    }

    /**
     * <p>Retrieve the number of data elements that have been added for the geese in the next step of the workflow.</p>
     * @param requestID the ID generated by addSession
     * @return the number of data elements that have been added for the geese in the next step of the workflow
     */
    public int dataSubmittedForSession(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            WorkflowGaggleData stagingData = this.processingQueue.get(requestID);
            System.out.println("Data submitted for " + requestID + ": " + stagingData.dataSubmitted());
            return stagingData.dataSubmitted();
        }
        else
            System.out.println("No data exists for " + requestID);
        return 0;
    }

    public WorkflowAction getSessionResponse(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            System.out.println("Response data for " + requestID);
            return this.processingQueue.get(requestID).getWorkflowResponse();
        }
        return null;
    }

    /**
     * <p>Remove the workflowAction after finishing handling it.</p>
     * @param requestID the ID generated by addSession
     */
    public void RemoveSessionData(String requestID)
    {
        if (this.processingQueue.containsKey(requestID))
        {
            this.processingQueue.remove(requestID);
            System.out.println("Session data removed for " + requestID);
        }
    }

    /**
     * <p>All the data are ready, we submit the response to the boss.</p>
     * @param boss Boss that supports the Boss3 interface
     * @param requestID requestID generated by addSession
     * @return true if data is submitted successfully. false if error is encountered
     */
    public boolean CompleteWorkflowAction(Boss boss, String requestID)
    {
        boolean succeeded = false;
        System.out.println("About to complete workflow action for " + requestID);
        if (this.finalizeSessionAction(requestID))
        {
            WorkflowAction response = this.getSessionResponse(requestID);
            if (response != null)
            {
                if (boss instanceof Boss3)
                {
                    try
                    {
                        System.out.println("About to send workflow response to boss...");
                        ((Boss3)boss).handleWorkflowAction(response);
                        System.out.println("Data Sent!");
                        succeeded = true;
                    }
                    catch (Exception e)
                    {
                        System.out.println("Failed to submit workflow response to boss: " + e.getMessage());
                    }
                }
                else
                    System.out.println("Boss does not support Workflow!");
            }
        }

        if (succeeded)
            this.RemoveSessionData(requestID);

        return succeeded;
    }
}
