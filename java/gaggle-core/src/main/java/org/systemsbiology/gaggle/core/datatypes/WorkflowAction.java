package org.systemsbiology.gaggle.core.datatypes;

import javax.xml.transform.Source;
import java.io.*;
import java.util.UUID;

/**
 *
 * <p>A workflow action consists of a source component, a list of target components,
 * and data passed by the source component
 * to the target. It also contains information of how to invoke source and target geese.</p>
 *
 * <p>There are two scenarios where data is passed between Boss and Geese. We explain them through a simple example as follows.
 * Suppose a user creates a workflow where Cytoscape opens a session file and broadcasts some data to Firegoose and MeV.
 * In this example, Boss first starts Cytoscape, and then needs to pass the session file to it. To achieve this, Boss creates
 * a WorkflowAction, sets the source to be Cytoscape, and the targets to be Firegoose and MeV. Boss will then set the url
 * of the session file as the WorkflowComponent.ParamNames.Data to the source's params field and call the HandleWorkflowAction
 * API of Cytoscape. When Cytoscape receives the WorkflowAction, it should get the data from the source's params field and
 * open the session file.</p>
 *
 * <p>Once Cytoscape is about to send data to the subsequent geese in the workflow (namely, Firegoose and MeV), it creates
 * another WorkflowAction, setting the source to be Cytoscape and targets to be Firegoose and MeV. Now, it puts the data in the
 * data field of the WorkflowAction. Note the data field is a list. Cytoscape should put the data to the field in the same
 * order as the targets field. That is, if targets[0] is Firegoose and targets[1] is MeV, then data[0] should be assigned
 * with data for Firegoose and data[1] should be assigned with data for MeV, respectively. Cytoscape calls the HandleWorkflowAction
 * API of Boss, which will then create two WorkflowActions for Firegoose and Mev, respectively, and passes the data to them
 * as described in the first scenario.</p>
 *
 */
public class WorkflowAction implements Serializable {
    private String workflowID;
    private String sessionID;
    private String componentID;
    private ActionType actionType; // This is the type of the action (i.e., request, response, etc)
    private WorkflowComponent source;
    private WorkflowComponent[] targets;
    private int option; //This is the data type to be broadcast from source to target
    private GaggleData[] data; // This is the data to be handled by source

    public enum ActionType
    {
        Request,
        Response
    }

    public enum DataType
    {
        DataMatrix,
        Namelist,
        Network,
        Cluster,
        Map,
        WorkflowData,
        Generic
    }

    public enum Options
    {
        Parallel(0x00001),
        Sequential(0x00010),
        SuccessMessage(0x00100),
        ErrorMessage(0x01000),
        WorkflowReportData(0x10000);

        private final int id;
        Options(int id) { this.id = id; }
        public int getValue() { return id; }
    }

    /**
     *
     * @param workflowID The ID of a workflow. The ID is generated by the server when a workflow is saved.
     *                   If the workflow is not saved, the ID could be empty.
     * @param sessionID  The sessionID is generated by the Boss for each run of a workflow. It is used by
     *                   the geese of a workflow to store data corresponding to the session.
     * @param componentID The ID of the source goose. This is used by the source goose to
     *                    generate report data for a workflow.
     * @param actionType  The type of the workflowAction (Request or Response).
     * @param source      The workflowComponent corresponding to the source goose.
     * @param targets     A list of workflowComponents corresponding to target geese.
     * @param option      Option of the workflowAction. Refer to the Options enum for details.
     * @param data        A list of data to be processed by target geese. Each element corresponds to
     *                    one element in the targets list.
     */
    public WorkflowAction(String workflowID,
                          String sessionID,
                          String componentID,
                          ActionType actionType,
                          WorkflowComponent source,
                          WorkflowComponent[] targets,
                          int option,
                          GaggleData[] data)
    {
        this.workflowID = workflowID;
        this.sessionID = sessionID;
        this.componentID = componentID;
        this.source = source;
        this.targets = targets;
        this.actionType = actionType;
        this.option = option;
        //this.nextStepDataTypes = dataTypes;
        this.data = data;
    }

    public String getWorkflowID() { return workflowID; }
    public String getSessionID() { return sessionID; }
    public String getComponentID() { return componentID; }
    public ActionType getActionType() { return actionType; }
    public WorkflowComponent getSource() { return source; }
    public WorkflowComponent[] getTargets() { return targets; }
    public void setTargets(WorkflowComponent[] targets) { this.targets = targets; }

    //public DataType[] getDataType() { return nextStepDataTypes; }
    public int getOption() { return option; }
    public GaggleData[] getData() { return data; }
    public void setData(GaggleData[] gdata) { this.data = gdata; }
}
